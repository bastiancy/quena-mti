{
    "swagger": "2.0",
    "info": {
        "description": "Tienda online para venta de instrumentos musicales,  \npara la tarea del MTI\n",
        "version": "0.1.0",
        "title": "Quena Store",
        "contact": {
            "name": "bastian.carvajal@sansano.usm.cl"
        }
    },
    "host": "quena-mti.bastianc.info",
    "basePath": "/api/",
    "schemes": [
        "http"
    ],
    "paths": {
        "/productos": {
            "post": {
                "tags": [
                    "producto"
                ],
                "summary": "Add a new producto to the store",
                "description": "",
                "operationId": "addProducto",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Producto object that needs to be added to the store",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Producto"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "store_auth": [
                            "write_productos",
                            "read_productos"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "producto"
                ],
                "summary": "Update an existing producto",
                "description": "",
                "operationId": "updateProducto",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Producto object that needs to be added to the store",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Producto"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Producto not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "store_auth": [
                            "write_productos",
                            "read_productos"
                        ]
                    }
                ]
            }
        },
        "/productos/findByStatus": {
            "get": {
                "tags": [
                    "producto"
                ],
                "summary": "Finds Producto by status",
                "description": "Multiple status values can be provided with comma seperated strings",
                "operationId": "findProductosByStatus",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status values that need to be considered for filter",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Producto"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "store_auth": [
                            "write_productos",
                            "read_productos"
                        ]
                    }
                ]
            }
        },
        "/productos/findByTags": {
            "get": {
                "tags": [
                    "producto"
                ],
                "summary": "Finds Producto by tags",
                "description": "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findProductosByTags",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "tags",
                        "description": "Tags to filter by",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Producto"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": [
                    {
                        "store_auth": [
                            "write_productos",
                            "read_productos"
                        ]
                    }
                ]
            }
        },
        "/productos/{productoId}": {
            "get": {
                "tags": [
                    "producto"
                ],
                "summary": "Find producto by ID",
                "description": "Returns a producto when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",
                "operationId": "getProductoById",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "productoId",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Producto"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Producto not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    },
                    {
                        "store_auth": [
                            "write_productos",
                            "read_productos"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "producto"
                ],
                "summary": "Updates a producto in the store with form data",
                "description": "",
                "operationId": "updateProductoWithForm",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "productoId",
                        "description": "ID of producto that needs to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "nombre",
                        "description": "Updated nombre of the producto",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "description",
                        "description": "Updated description of the producto",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "store_auth": [
                            "write_productos",
                            "read_productos"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "producto"
                ],
                "summary": "Deletes a producto",
                "description": "",
                "operationId": "deleteProducto",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "api_key",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "productoId",
                        "description": "Producto id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid producto value"
                    }
                },
                "security": [
                    {
                        "store_auth": [
                            "write_productos",
                            "read_productos"
                        ]
                    }
                ]
            }
        },
        "/stores/order": {
            "post": {
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "description": "",
                "operationId": "placeOrder",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "order placed for purchasing the pet",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Venta"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Venta"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                }
            }
        },
        "/stores/order/{orderId}": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                "operationId": "getOrderById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orderId",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Venta"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "store"
                ],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                "operationId": "deleteOrder",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orderId",
                        "description": "ID of the order that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Created user object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/users/createWithArray": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithArrayInput",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/users/createWithList": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithListInput",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/users/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "description": "",
                "operationId": "loginUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "The user name for login",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for login in clear text",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
            }
        },
        "/users/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "description": "",
                "operationId": "logoutUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/users/{username}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "description": "",
                "operationId": "getUserByName",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "The name that needs to be fetched. Use user1 for testing.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "name that need to be deleted",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated user object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        },
        "store_auth": {
            "type": "oauth2",
            "authorizationUrl": "http://quena-mti.bastianc.info/api/oauth/dialog",
            "flow": "implicit",
            "scopes": {
                "write_productos": "modify productos in your account",
                "read_productos": "read your productos"
            }
        }
    },
    "definitions": {
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "username": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                }
            }
        },
        "Direccion": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "pais": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "ciudad": {
                    "type": "string"
                },
                "descripcion": {
                    "type": "string"
                },
                "zipcode": {
                    "type": "string"
                },
                "geo_lat": {
                    "type": "number",
                    "format": "double"
                },
                "geo_lon": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "id",
                "pais",
                "ciudad",
                "descripcion"
            ]
        },
        "Establecimiento": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "nombre": {
                    "type": "string"
                },
                "direccion": {
                    "$ref": "#/definitions/Direccion"
                }
            },
            "required": [
                "id",
                "nombre"
            ]
        },
        "Categoria": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "nombre": {
                    "type": "string"
                },
                "descripcion": {
                    "type": "string"
                },
                "categoriaPadre": {
                    "$ref": "#/definitions/Categoria"
                }
            },
            "required": [
                "id",
                "nombre"
            ]
        },
        "Producto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "codigo_tipo": {
                    "type": "string"
                },
                "codigo_valor": {
                    "type": "string"
                },
                "nombre": {
                    "type": "string"
                },
                "marca": {
                    "type": "string"
                },
                "modelo": {
                    "type": "string"
                },
                "descripcion": {
                    "type": "string"
                },
                "origen": {
                    "type": "string"
                },
                "categorias": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Categoria"
                        }
                    ]
                },
                "caracteristicas": {
                    "allOf": [
                        {
                            "type": "object",
                            "properties": {
                                "nombre": {
                                    "type": "string"
                                },
                                "valor": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "nombre"
                            ]
                        }
                    ]
                }
            },
            "required": [
                "id",
                "codigo_tipo",
                "codigo_valor",
                "nombre"
            ]
        },
        "Inventario": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "establecimiento": {
                    "$ref": "#/definitions/Establecimiento"
                },
                "producto": {
                    "$ref": "#/definitions/Producto"
                },
                "codigo_tipo": {
                    "type": "string"
                },
                "codigo_valor": {
                    "type": "string"
                },
                "precio_moneda": {
                    "type": "string"
                },
                "precio_valor": {
                    "type": "number",
                    "format": "double"
                },
                "estado": {
                    "type": "string"
                },
                "fecha_actualizado": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "required": [
                "id",
                "establecimiento",
                "producto",
                "estado",
                "fecha_actualizado"
            ]
        },
        "Cliente": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "nombre": {
                    "type": "string"
                },
                "apellido": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fecha_registro": {
                    "type": "string",
                    "format": "date-time"
                },
                "estado": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "nombre",
                "apellido",
                "estado"
            ]
        },
        "Venta": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "establecimiento": {
                    "$ref": "#/definitions/Establecimiento"
                },
                "cliente": {
                    "$ref": "#/definitions/Cliente"
                },
                "pago_moneda": {
                    "type": "string"
                },
                "pago_valor": {
                    "type": "number",
                    "format": "double"
                },
                "estado": {
                    "type": "string"
                },
                "fecha_venta": {
                    "type": "string",
                    "format": "date-time"
                },
                "items": {
                    "allOf": [
                        {
                            "type": "object",
                            "properties": {
                                "inventario": {
                                    "$ref": "#/definitions/Inventario"
                                },
                                "precio_moneda": {
                                    "type": "string"
                                },
                                "precio_valor": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "inventario"
                            ]
                        }
                    ]
                }
            },
            "required": [
                "id",
                "establecimiento",
                "cliente",
                "estado"
            ]
        }
    }
}